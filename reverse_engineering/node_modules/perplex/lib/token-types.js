"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Thank you, http://stackoverflow.com/a/6969486
function toRegExp(str) {
    return new RegExp(str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'));
}
function normalize(regex) {
    if (typeof regex === 'string')
        regex = toRegExp(regex);
    if (!regex.source.startsWith('^'))
        return new RegExp("^" + regex.source, regex.flags);
    else
        return regex;
}
function first(arr, predicate) {
    var i = 0;
    for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
        var item = arr_1[_i];
        var result = predicate(item, i++);
        if (result)
            return { item: item, result: result };
    }
}
/**
 * @private
 */
var TokenTypes = (function () {
    function TokenTypes() {
        this.tokenTypes = [];
    }
    TokenTypes.prototype.disable = function (type) {
        return this.enable(type, false);
    };
    TokenTypes.prototype.enable = function (type, enabled) {
        if (enabled === void 0) { enabled = true; }
        this.tokenTypes
            .filter(function (t) { return t.type == type; })
            .forEach(function (t) { return (t.enabled = enabled); });
        return this;
    };
    TokenTypes.prototype.isEnabled = function (type) {
        var ttypes = this.tokenTypes.filter(function (tt) { return tt.type == type; });
        if (ttypes.length == 0)
            throw new Error("Token of type " + type + " does not exists");
        return ttypes[0].enabled;
    };
    TokenTypes.prototype.peek = function (source, position) {
        var s = source.substr(position);
        return first(this.tokenTypes.filter(function (tt) { return tt.enabled; }), function (tt) {
            tt.regex.lastIndex = 0;
            return tt.regex.exec(s);
        });
    };
    TokenTypes.prototype.token = function (type, pattern, skip) {
        if (skip === void 0) { skip = false; }
        this.tokenTypes.push({
            type: type,
            regex: normalize(pattern),
            enabled: true,
            skip: skip,
        });
        return this;
    };
    return TokenTypes;
}());
exports.default = TokenTypes;
//# sourceMappingURL=token-types.js.map