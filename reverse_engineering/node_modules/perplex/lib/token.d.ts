import Lexer from './lexer';
/**
 * @typedef {{
 *   start: Position,
 *   end: Position,
 * }} TokenPosition
 */
/**
 * Represents a token instance
 */
declare class Token<T> {
    type: T;
    match: string;
    groups: string[];
    start: number;
    end: number;
    lexer: Lexer<T>;
    /**
     * Constructs a token
     * @param {T} type The token type
     * @param {string} match The string that the lexer consumed to create this token
     * @param {string[]} groups Any RegExp groups that accrued during the match
     * @param {number} start The string position where this match started
     * @param {number} end The string position where this match ends
     * @param {Lexer<T>} lexer The parent {@link Lexer}
     */
    constructor(type: T, match: string, groups: string[], start: number, end: number, lexer: Lexer<T>);
    /**
     * Returns the bounds of this token, each in `{line, column}` format
     * @return {TokenPosition}
     */
    strpos(): {
        start: {
            line: number;
            column: number;
        };
        end: {
            line: number;
            column: number;
        };
    };
    isEof(): boolean;
}
export default Token;
export declare class EOFToken<T> extends Token<T> {
    constructor(lexer: Lexer<T>);
    isEof(): boolean;
}
/**
 * @private
 */
export declare const EOF: (lexer: Lexer<any>) => EOFToken<any>;
